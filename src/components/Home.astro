---
// Componente Hero.astro
---

<main class="bg-oscuro text-white w-full">
  <!-- Hero Section with Typing Effect -->
  <section id="Inicio" class="pt-20 md:pt-24 lg:pt-28 pb-8 md:pb-12 px-4 sm:px-6 lg:px-8">
    <div class="container mx-auto max-w-6xl">
      <div class="max-w-4xl">
        <h1 class="text-2xl md:text-4xl lg:text-5xl font-bold mb-4 md:mb-6 leading-tight flex flex-wrap items-center">
          <span class="whitespace-nowrap mr-2">Te hacemos</span>
          <span class="text-lila whitespace-nowrap">
            &lt; <span id="typing-animation" class="typing-animation">
                <span id="typing-text" class="typing-text"></span><span class="typing-cursor">|</span><span> /&gt;</span>
              </span>
          </span>
        </h1>

        <p class="text-lg md:text-xl text-gray-300 mb-8 max-w-2xl leading-relaxed">
          Somos tu equipo tech. Transformamos ideas en productos digitales
          a medida. Desarrollo de software, diseño UX/UI y mantenimiento.
        </p>

        <a href="#contacto" class="inline-block bg-violet-600 hover:bg-violet-700 text-white font-medium px-6 py-3 rounded transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-offset-black">
          Quiero contactarme
        </a>
      </div>
    </div>
  </section>

  <!-- Image Section -->
  <section class="py-4 md:py-8 px-4 sm:px-6 lg:px-8">
    <div class="container mx-auto max-w-6xl">
      <div class="overflow-hidden rounded-lg shadow-xl">
        <img 
          src="/img/fondo2.png" 
          alt="Equipo de desarrollo trabajando en conjunto"
          class="w-full h-auto object-cover"
        />
      </div>
    </div>
  </section>

  <!-- Divider Section -->
  <section class="py-8 px-4 sm:px-6 lg:px-8">
    <div class="container mx-auto max-w-6xl">
      <div class="border-t border-gris"></div>
    </div>
  </section>

  <!-- Estilos de la animación -->
  <style>
    /* Contenedor con altura fija para evitar saltos */
    .typing-animation {
      display: inline-block;
      min-width: 100px; /* Base width for smallest screens */
      position: relative;
    }
    
    /* Ajustes responsivos para el contenedor */
    @media (min-width: 480px) {
      .typing-animation {
        min-width: 140px;
      }
    }
    
    @media (min-width: 640px) {
      .typing-animation {
        min-width: 180px;
      }
    }
    
    @media (min-width: 768px) {
      .typing-animation {
        min-width: 220px;
      }
    }
    
    @media (min-width: 1024px) {
      .typing-animation {
        min-width: 260px; /* Ancho para palabras largas en pantallas grandes */
      }
    }

    @keyframes blink {
      0%, 100% { opacity: 1; }
      50% { opacity: 0; }
    }
    
    .typing-text {
      color: #8B5CF6;
    }
    
    .typing-cursor {
      display: inline-block;
      animation: blink 1s step-end infinite;
      color: #8B5CF6;
    }
  </style>

  <!-- Script de typing mejorado con cursor dinámico -->
  <script type="text/javascript" is:inline>
    const typingConfig = {
      words: ['Página Web', 'Software a medida', 'Diseño UX/UI', 'Mantenimiento'],
      typeSpeed: 50,
      deleteSpeed: 50,
      delayBetweenWords: 1500,
      loop: true
    };

    let typingAnimation;
    let typingText;
    let timeoutId;
    let state = {
      wordIndex: 0,
      charIndex: 0,
      isDeleting: false
    };

    // Función para calcular el ancho del contenedor basado en la palabra más larga y el tamaño de pantalla
    function setOptimalContainerWidth() {
      if (!typingAnimation) return;
      
      // Crear un elemento temporal para medir el ancho
      const tempSpan = document.createElement('span');
      tempSpan.style.visibility = 'hidden';
      tempSpan.style.position = 'absolute';
      tempSpan.style.whiteSpace = 'nowrap';
      tempSpan.style.fontSize = window.getComputedStyle(typingAnimation).fontSize;
      tempSpan.style.fontFamily = window.getComputedStyle(typingAnimation).fontFamily;
      tempSpan.style.fontWeight = window.getComputedStyle(typingAnimation).fontWeight;
      
      document.body.appendChild(tempSpan);
      
      // Encontrar la palabra más larga
      let maxWidth = 0;
      typingConfig.words.forEach(word => {
        tempSpan.textContent = word + " /> "; // Incluir el cierre para calcular el ancho total
        const width = tempSpan.getBoundingClientRect().width;
        maxWidth = Math.max(maxWidth, width);
      });
      
      // Añadir un pequeño margen y ajustar según el tamaño de pantalla
      const screenWidth = window.innerWidth;
      let adjustedWidth = maxWidth + 20; // Añadir margen adicional
      
      // Ajustes específicos por tamaño de pantalla
      if (screenWidth < 380) {
        adjustedWidth = Math.min(adjustedWidth, screenWidth * 0.3);
      } else if (screenWidth < 480) {
        adjustedWidth = Math.min(adjustedWidth, screenWidth * 0.35);
      } else if (screenWidth < 640) {
        adjustedWidth = Math.min(adjustedWidth, screenWidth * 0.4);
      } else if (screenWidth < 768) {
        adjustedWidth = Math.min(adjustedWidth, screenWidth * 0.45);
      }
      
      // Asegurar un mínimo para cada tamaño de pantalla
      const minWidth = screenWidth < 480 ? 100 : 
                       screenWidth < 640 ? 140 : 
                       screenWidth < 768 ? 180 : 
                       screenWidth < 1024 ? 220 : 260;
                       
      adjustedWidth = Math.max(adjustedWidth, minWidth);
      
      typingAnimation.style.minWidth = `${adjustedWidth}px`;
      document.body.removeChild(tempSpan);
    }

    function animateTyping() {
      if (!typingText) return;

      const currentWord = typingConfig.words[state.wordIndex];
      state.charIndex = state.isDeleting 
        ? state.charIndex - 1 
        : state.charIndex + 1;

      // Actualiza solo el texto, dejando el cursor y el cierre /> donde están
      typingText.textContent = currentWord.substring(0, state.charIndex);

      let typingSpeed = state.isDeleting ? typingConfig.deleteSpeed : typingConfig.typeSpeed;

      if (!state.isDeleting && state.charIndex === currentWord.length) {
        typingSpeed = typingConfig.delayBetweenWords;
        state.isDeleting = true;
      } else if (state.isDeleting && state.charIndex === 0) {
        state.isDeleting = false;
        state.wordIndex = (state.wordIndex + 1) % typingConfig.words.length;
      }

      timeoutId = setTimeout(animateTyping, typingSpeed);
    }

    function initTypingEffect() {
      typingAnimation = document.getElementById('typing-animation');
      typingText = document.getElementById('typing-text');
      
      if (typingAnimation && typingText) {
        setOptimalContainerWidth();
        state = { wordIndex: 0, charIndex: 0, isDeleting: false };
        animateTyping();
      }
    }

    // Iniciar la animación cuando el DOM esté listo
    document.addEventListener('DOMContentLoaded', initTypingEffect);
    
    // Recalcular el ancho cuando cambie el tamaño de la ventana
    window.addEventListener('resize', setOptimalContainerWidth);
    
    // Limpiar el timeout cuando sea necesario
    window.addEventListener('beforeunload', () => timeoutId && clearTimeout(timeoutId));
    document.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'hidden' && timeoutId) {
        clearTimeout(timeoutId);
      } else if (document.visibilityState === 'visible' && typingText) {
        animateTyping();
      }
    });
  </script>
</main>